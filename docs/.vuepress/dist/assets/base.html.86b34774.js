import{_ as i,r as t,o as r,c as u,a as n,b as s,d as a,w as p,e}from"./app.eff09732.js";const k={},d=n("h1",{id:"typescript\u57FA\u7840",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typescript\u57FA\u7840","aria-hidden":"true"},"#"),s(" typescript\u57FA\u7840")],-1),m=n("h2",{id:"\u53C2\u8003",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53C2\u8003","aria-hidden":"true"},"#"),s(" \u53C2\u8003")],-1),v={href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html",target:"_blank",rel:"noopener noreferrer"},b=e(`<h2 id="\u5206\u914D\u7387" tabindex="-1"><a class="header-anchor" href="#\u5206\u914D\u7387" aria-hidden="true">#</a> \u5206\u914D\u7387</h2><p>\u53D1\u751F\u5728exends\u8868\u8FBE\u5F0F\u91CC\uFF0C\u4F20\u5165\u7684\u8054\u5408\u7C7B\u578B(union type)\u7684\u65F6\u5019</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ToArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D5</span></span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// string[] | number[]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D6</span></span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D7</span></span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u53BB\u6389\u5206\u914D\u5F8B\u7684\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u53BB\u6389\u5206\u914D\u5F8B\u7684\u65B9\u5F0F" aria-hidden="true">#</a> \u53BB\u6389\u5206\u914D\u5F8B\u7684\u65B9\u5F0F</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type toArray2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>any<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> never
type <span class="token constant">D55</span> <span class="token operator">=</span> toArray2<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span> <span class="token comment">// (string | number)[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a> \u9012\u5F52</h2><p>\u9012\u5F52\u6DF1\u5EA6\u6700\u5927\u4E0D\u8D85\u8FC71000</p><p>\u5B9E\u73B0\u8F93\u5165\u6570\u5B57\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6570\u7EC4\u75280\u586B\u5145\u3002\uFF08\u7C7B\u4F3CArray(3).fill(0)\u7684\u529F\u80FD\uFF09</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Tupler<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> Arr <span class="token keyword">extends</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Arr<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">?</span> Arr <span class="token operator">:</span> Tupler<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u5B9E\u73B0\u4E00\u4E2A\u628A\u6570\u7EC4\u91CC\u7684\u7C7B\u578B\uFF0C\u6309\u7167\u5982\u679C\u662Fnumber\u8F6C\u4E3A&#39;yes&#39;\u5B57\u7B26\u4E32\u5426\u5219\u5C31\u8F6C\u4E3A&#39;no&#39;\u7684type\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span><span class="token operator">&lt;</span>key<span class="token operator">&gt;</span></span> <span class="token operator">=</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T1</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">M</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">N</span><span class="token punctuation">]</span> <span class="token operator">?</span> 
  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> 
      <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> 
      <span class="token constant">T3</span><span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
    <span class="token operator">:</span> 
    <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> <span class="token constant">T3</span><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B1B\u5361\u5C14\u79EF" tabindex="-1"><a class="header-anchor" href="#\u7B1B\u5361\u5C14\u79EF" aria-hidden="true">#</a> \u7B1B\u5361\u5C14\u79EF</h2><p>\u4F7F\u7528\u8054\u5408\u7C7B\u578B\uFF08union type\uFF09\u5728\u5B57\u7B26\u4E32\u6A21\u677F\u5408\u5E76\u4F1A\u53D1\u751F\u7B1B\u5361\u5C14\u79EF\u7684\u73B0\u8C61</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> <span class="token string">&#39;d&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;e&#39;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">A1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">A2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// &quot;ad&quot; | &quot;ae&quot; | &quot;bd&quot; | &quot;be&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u679A\u4E3E\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u679A\u4E3E\u7C7B\u578B" aria-hidden="true">#</a> \u679A\u4E3E\u7C7B\u578B</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Black <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>Green<span class="token punctuation">)</span> <span class="token comment">// 2</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Red&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u51FD\u6570\u91CD\u8F7D" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u91CD\u8F7D" aria-hidden="true">#</a> \u51FD\u6570\u91CD\u8F7D</h2><p>\u548Cjava\u7684\u51FD\u6570\u91CD\u8F7D\u4E0D\u4E00\u6837</p>`,18),y=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),s(),n("span",{class:"token punctuation"},"{"),s(`
  
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("blockquote",null,null,-1),w=n("p",null,"\u91CD\u8F7D(overloading) \u662F\u5728\u4E00\u4E2A\u7C7B\u91CC\u9762\uFF0C\u65B9\u6CD5\u540D\u5B57\u76F8\u540C\uFF0C\u800C\u53C2\u6570\u4E0D\u540C\u3002\u8FD4\u56DE\u7C7B\u578B\u53EF\u4EE5\u76F8\u540C\u4E5F\u53EF\u4EE5\u4E0D\u540C\u3002",-1),h=n("p",null,"\u6BCF\u4E2A\u91CD\u8F7D\u7684\u65B9\u6CD5\uFF08\u6216\u8005\u6784\u9020\u51FD\u6570\uFF09\u90FD\u5FC5\u987B\u6709\u4E00\u4E2A\u72EC\u4E00\u65E0\u4E8C\u7684\u53C2\u6570\u7C7B\u578B\u5217\u8868\u3002",-1),f=n("p",null,"\u6700\u5E38\u7528\u7684\u5730\u65B9\u5C31\u662F\u6784\u9020\u5668\u7684\u91CD\u8F7D\u3002",-1),x=n("p",null,"\u91CD\u8F7D\u89C4\u5219:",-1),T=n("ul",null,[n("li",null,"\u88AB\u91CD\u8F7D\u7684\u65B9\u6CD5\u5FC5\u987B\u6539\u53D8\u53C2\u6570\u5217\u8868(\u53C2\u6570\u4E2A\u6570\u6216\u7C7B\u578B\u4E0D\u4E00\u6837)\uFF1B"),n("li",null,"\u88AB\u91CD\u8F7D\u7684\u65B9\u6CD5\u53EF\u4EE5\u6539\u53D8\u8FD4\u56DE\u7C7B\u578B\uFF1B"),n("li",null,"\u88AB\u91CD\u8F7D\u7684\u65B9\u6CD5\u53EF\u4EE5\u6539\u53D8\u8BBF\u95EE\u4FEE\u9970\u7B26\uFF1B"),n("li",null,"\u88AB\u91CD\u8F7D\u7684\u65B9\u6CD5\u53EF\u4EE5\u58F0\u660E\u65B0\u7684\u6216\u66F4\u5E7F\u7684\u68C0\u67E5\u5F02\u5E38\uFF1B"),n("li",null,"\u65B9\u6CD5\u80FD\u591F\u5728\u540C\u4E00\u4E2A\u7C7B\u4E2D\u6216\u8005\u5728\u4E00\u4E2A\u5B50\u7C7B\u4E2D\u88AB\u91CD\u8F7D\u3002"),n("li",null,"\u65E0\u6CD5\u4EE5\u8FD4\u56DE\u503C\u7C7B\u578B\u4F5C\u4E3A\u91CD\u8F7D\u51FD\u6570\u7684\u533A\u5206\u6807\u51C6\u3002")],-1),_=n("div",{class:"language-java ext-java line-numbers-mode"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Overloading"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test2"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`   
 
  `),n("span",{class:"token comment"},"//\u4EE5\u4E0B\u4E24\u4E2A\u53C2\u6570\u7C7B\u578B\u987A\u5E8F\u4E0D\u540C"),s(`
  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test3"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"returntest3"'),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`   

  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" s"),n("span",{class:"token punctuation"},","),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test4"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"returntest4"'),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`   

  `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token class-name"},"Overloading"),s(" o "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Overloading"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      o`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"test3"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test4"'),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=e(`<h2 id="never\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#never\u7C7B\u578B" aria-hidden="true">#</a> Never\u7C7B\u578B</h2><p>\u4EE3\u8868\u6CA1\u6709\u8FD4\u56DE\u7684\u7C7B\u578B\u5982\u62A5\u9519</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;233&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6216\u8005\u65E0\u9650\u7684while(true)\u5FAA\u73AF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u6709\u4E2A&quot;\u515C\u5E95&quot;\u7684\u60C5\u51B5\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">All</span> <span class="token operator">=</span> Foo <span class="token operator">|</span> Bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728 switch \u5F53\u4E2D\u5224\u65AD type\uFF0CTS \u662F\u53EF\u4EE5\u6536\u7A84\u7C7B\u578B\u7684 (discriminated union)\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">handleValue</span><span class="token punctuation">(</span>val<span class="token operator">:</span> All<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">:</span>
      <span class="token comment">// \u8FD9\u91CC val \u88AB\u6536\u7A84\u4E3A Foo</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;bar&#39;</span><span class="token operator">:</span>
      <span class="token comment">// val \u5728\u8FD9\u91CC\u662F Bar</span>
      <span class="token keyword">break</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token comment">// val \u5728\u8FD9\u91CC\u662F never</span>
      <span class="token keyword">const</span> exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> val
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unknown" tabindex="-1"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h2>`,10),q={href:"https://github.com/Microsoft/TypeScript/pull/24439",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// In an intersection everything absorbs unknown</span>

type <span class="token constant">T00</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// null</span>
type <span class="token constant">T01</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>
type <span class="token constant">T02</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> <span class="token keyword">null</span> <span class="token operator">&amp;</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// null &amp; undefined (which becomes never in union)</span>
type <span class="token constant">T03</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> string<span class="token punctuation">;</span>  <span class="token comment">// string</span>
type <span class="token constant">T04</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// string[]</span>
type <span class="token constant">T05</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> unknown<span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T06</span> <span class="token operator">=</span> unknown <span class="token operator">&amp;</span> any<span class="token punctuation">;</span>  <span class="token comment">// any</span>

<span class="token comment">// In a union an unknown absorbs everything</span>

type <span class="token constant">T10</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T11</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T12</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T13</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> string<span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T14</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T15</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> unknown<span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
type <span class="token constant">T16</span> <span class="token operator">=</span> unknown <span class="token operator">|</span> any<span class="token punctuation">;</span>  <span class="token comment">// any</span>

<span class="token comment">// Type variable and unknown in union and intersection</span>

type <span class="token constant">T20</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// T &amp; {}</span>
type <span class="token constant">T21</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// T | {}</span>
type <span class="token constant">T22</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> unknown<span class="token punctuation">;</span>  <span class="token comment">// T</span>
type <span class="token constant">T23</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> unknown<span class="token punctuation">;</span>  <span class="token comment">// unknown</span>

<span class="token comment">// unknown in conditional types</span>

type <span class="token constant">T30</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> unknown <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// Deferred</span>
type <span class="token constant">T31</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">unknown</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// Deferred (so it distributes)</span>
type <span class="token constant">T32</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> never <span class="token keyword">extends</span> <span class="token class-name">T</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
type <span class="token constant">T33</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">never</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// Deferred</span>

<span class="token comment">// keyof unknown</span>

type <span class="token constant">T40</span> <span class="token operator">=</span> keyof any<span class="token punctuation">;</span>  <span class="token comment">// string | number | symbol</span>
type <span class="token constant">T41</span> <span class="token operator">=</span> keyof unknown<span class="token punctuation">;</span>  <span class="token comment">// never</span>

<span class="token comment">// Only equality operators are allowed with unknown</span>

<span class="token keyword">function</span> <span class="token function">f10</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">;</span>
    x <span class="token operator">!==</span> <span class="token number">10</span><span class="token punctuation">;</span>
    x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token operator">-</span>x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token operator">+</span>x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// No property accesses, element accesses, or function calls</span>

<span class="token keyword">function</span> <span class="token function">f11</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token keyword">new</span> <span class="token class-name">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// typeof, instanceof, and user defined type predicates</span>

declare <span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> x is Function<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f20</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">;</span>  <span class="token comment">// string | number</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">;</span>  <span class="token comment">// Function</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Homomorphic mapped type over unknown</span>

type <span class="token constant">T50</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span>
type <span class="token constant">T51</span> <span class="token operator">=</span> <span class="token constant">T50</span><span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// { [x: string]: number }</span>
type <span class="token constant">T52</span> <span class="token operator">=</span> <span class="token constant">T50</span><span class="token operator">&lt;</span>unknown<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// {}</span>

<span class="token comment">// Anything is assignable to unknown</span>

<span class="token keyword">function</span> f21<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>pAny<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">pNever</span><span class="token operator">:</span> never<span class="token punctuation">,</span> <span class="token literal-property property">pT</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> unknown<span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x <span class="token operator">=</span> pAny<span class="token punctuation">;</span>
    x <span class="token operator">=</span> pNever<span class="token punctuation">;</span>
    x <span class="token operator">=</span> pT<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// unknown assignable only to itself and any</span>

<span class="token keyword">function</span> <span class="token function">f22</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v1</span><span class="token operator">:</span> any <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v2</span><span class="token operator">:</span> unknown <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v3</span><span class="token operator">:</span> object <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v4</span><span class="token operator">:</span> string <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v5</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v6</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token keyword">let</span> <span class="token literal-property property">v7</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Type parameter &#39;T extends unknown&#39; not related to object</span>

<span class="token keyword">function</span> f23<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">y</span><span class="token operator">:</span> object <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Anything but primitive assignable to { [x: string]: unknown }</span>

<span class="token keyword">function</span> <span class="token function">f24</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>x<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> unknown <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Locals of type unknown always considered initialized</span>

<span class="token keyword">function</span> <span class="token function">f25</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> unknown<span class="token punctuation">;</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Spread of unknown causes result to be unknown</span>

<span class="token keyword">function</span> <span class="token function">f26</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> unknown<span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">...</span>x <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// { a: number }</span>
    <span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">...</span>x<span class="token punctuation">,</span> <span class="token operator">...</span>y <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// unknown</span>
    <span class="token keyword">let</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">...</span>x<span class="token punctuation">,</span> <span class="token operator">...</span>y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// any</span>
<span class="token punctuation">}</span>

<span class="token comment">// Functions with unknown return type don&#39;t need return expressions</span>

<span class="token keyword">function</span> <span class="token function">f27</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> unknown <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Rest type cannot be created from unknown</span>

<span class="token keyword">function</span> <span class="token function">f28</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a <span class="token punctuation">}</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
<span class="token punctuation">}</span>

<span class="token comment">// Class properties of type unknown don&#39;t need definite assignment</span>

<span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token comment">// Error</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> unknown<span class="token punctuation">;</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5143\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5143\u7EC4" aria-hidden="true">#</a> \u5143\u7EC4</h2><p>\u5B9A\u4E49\u4E00\u4E2A\u6570\u7EC4\u91CC\u6BCF\u9879\u7684\u7C7B\u578B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">tuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>tuple<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6CDB\u578B" tabindex="-1"><a class="header-anchor" href="#\u6CDB\u578B" aria-hidden="true">#</a> \u6CDB\u578B</h2><p>\u5F53\u4E00\u4E2A\u51FD\u6570\uFF0C\u6211\u4EEC\u60F3\u4F20 number\u3001string\u3001\u6216\u8005\u4F60\u81EA\u5DF1\u5B9A\u4E49\u7684\u7C7B\u578B\u3002\u90A3\u4E48\u5C31\u9700\u8981\u5199\u6210\u6CDB\u578B\uFF0C\u610F\u601D\u4EE3\u8868\u4F20\u5165\u65F6\uFF0C\u6211\u4EEC\u5148\u6807\u8BB0\uFF08\u58F0\u660E\uFF09\u597D\u7C7B\u578B\u3002\u4F20\u53C2\u5C31\u8981\u6309\u7167\u6211\u4EEC\u6807\u8BB0\uFF08\u58F0\u660E\uFF09\u7684\u7C7B\u578B\u4F20\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">foo1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>a<span class="token punctuation">,</span>
    <span class="token operator">...</span>b
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token generic-function"><span class="token function">foo1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// \u6807\u8BB0(\u58F0\u660E)foo1\u4F20\u5165\u7684\u4E24\u4E2A\u53C2\u6570\u7684\u7C7B\u578B\uFF0C\u7B2C\u4E00\u4E2A\u4E3Astring\uFF0C\u7B2C\u4E8C\u4E2A\u662Fnumber\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Error: Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u53EF\u7701\u7565\uFF0Ces6\u9ED8\u8BA4\u4E0D\u5199\u5C31\u662F\u8FD9\u4E32\u4EE3\u7801</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;23&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Argument of type &#39;string&#39; is not assignable to parameter of type &#39;number&#39;.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h2><p>\u5982\u4E0B\u4EE3\u7801\u91CC keyof User\u5F97\u5230\u7684\u5C31\u662F name | age</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">readonly</span> age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">User1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">+</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">:</span> User<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">User2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> User<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">User3</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> User2 <span class="token keyword">as</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> key<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="infer" tabindex="-1"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h2><p>\u7C7B\u4F3C\u4E8E\u53D8\u91CF\u5360\u4F4D\u7684\u611F\u89C9\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R1</span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">M</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">N</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">M</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token comment">// 1</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R2</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R3</span></span> <span class="token operator">=</span> <span class="token constant">R2</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// string</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R4</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R5</span></span> <span class="token operator">=</span> <span class="token constant">R4</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token comment">// boolean</span>
<span class="token comment">// \u7B49\u540C\u4E8Etype R5 = ReturnType&lt;() =&gt; boolean&gt;</span>


<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> Arr <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">M</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">N</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">M</span> <span class="token operator">:</span> <span class="token constant">N</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D1</span></span> <span class="token operator">=</span> <span class="token constant">B1</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// yes</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D2</span></span> <span class="token operator">=</span> <span class="token constant">A1</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// no</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D3</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">A1</span> <span class="token operator">&amp;</span> <span class="token constant">A2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B1</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// yes</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D4</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// yes</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D5</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// no</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D6</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span> <span class="token comment">// yes </span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// false  \u8FD9\u91CC\u610F\u601D\u5C31\u662F\u503C\u6BD4\u8F83\u662F\u5426\u76F8\u7B49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thistype" tabindex="-1"><a class="header-anchor" href="#thistype" aria-hidden="true">#</a> ThisType</h2><p>\u9700\u8981\u5728tsconfig.json\u5F00\u542FnoImplicitThis: true</p><p>\u7ED9this\u52A0\u4E0A\u5C5E\u6027</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Aa</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> opt<span class="token operator">:</span> Aa <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token punctuation">{</span> cc<span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cc <span class="token operator">=</span> <span class="token string">&#39;string&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5355\u8BCD\u5B57\u7B26\u5927\u5C0F\u5199\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u5355\u8BCD\u5B57\u7B26\u5927\u5C0F\u5199\u64CD\u4F5C" aria-hidden="true">#</a> \u5355\u8BCD\u5B57\u7B26\u5927\u5C0F\u5199\u64CD\u4F5C</h2><h3 id="uppercase" tabindex="-1"><a class="header-anchor" href="#uppercase" aria-hidden="true">#</a> Uppercase</h3><p>\u628A\u5B57\u7B26\u4E32\u6240\u6709\u5B57\u6BCD\u90FD\u8F6C\u5927\u5199</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;hello, world&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ShoutyGreeting</span> <span class="token operator">=</span> Uppercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span> <span class="token comment">// &quot;HELLO, WORLD&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lowercase" tabindex="-1"><a class="header-anchor" href="#lowercase" aria-hidden="true">#</a> lowercase</h3><p>\u628A\u5B57\u7B26\u4E32\u6240\u6709\u5B57\u6BCD\u90FD\u8F6C\u5C0F\u5199</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> <span class="token string">&quot;HELLO, WORLD&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">QuietGreeting</span> <span class="token operator">=</span> Lowercase<span class="token operator">&lt;</span>Greeting<span class="token operator">&gt;</span> <span class="token comment">// &quot;hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="capitalize" tabindex="-1"><a class="header-anchor" href="#capitalize" aria-hidden="true">#</a> Capitalize</h3><p>\u5B57\u7B26\u4E32\u7B2C\u4E00\u4E2A\u5B57\u6BCD\u8F6C\u5927\u5199</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LowercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Greeting</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span>LowercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uncapitalize" tabindex="-1"><a class="header-anchor" href="#uncapitalize" aria-hidden="true">#</a> Uncapitalize</h3><p>\u5B57\u7B26\u4E32\u7B2C\u4E00\u4E2A\u5B57\u6BCD\u8F6C\u5C0F\u5199</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UppercaseGreeting</span> <span class="token operator">=</span> <span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UncomfortableGreeting</span> <span class="token operator">=</span> Uncapitalize<span class="token operator">&lt;</span>UppercaseGreeting<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// hELLO WORLD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function U(L,R){const o=t("ExternalLinkIcon"),c=t("CodeGroupItem"),l=t("CodeGroup");return r(),u("div",null,[d,m,n("ul",null,[n("li",null,[n("a",v,[s("ts\u5B98\u65B9\u6587\u6863 \u82F1\u6587"),a(o)])])]),b,a(l,null,{default:p(()=>[a(c,{title:"typescript"},{default:p(()=>[y]),_:1}),a(c,{title:"java"},{default:p(()=>[g,w,h,f,x,T,_]),_:1})]),_:1}),A,n("p",null,[n("a",q,[s("https://github.com/Microsoft/TypeScript/pull/24439"),a(o)])]),E])}const S=i(k,[["render",U],["__file","base.html.vue"]]);export{S as default};
